package com.yuen.domain;
// Generated Jan 30, 2018 7:35:01 PM by Hibernate Tools 5.0.6.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * TestComment generated by hbm2java
 */
@Entity
@Table(name = "test_comment", catalog = "test")
public class TestComment implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Integer testCommentId;
	private TestAccessMode testAccessMode;
	private TestReviewerDecision testReviewerDecision;
	private Date testCommentDate;
	private Date testCommentTime;
	private String testCommentDesc;
	private Set<QuestionComment> questionComments = new HashSet<QuestionComment>(0);
	private Set<TestCommentRelationship> testCommentRelationshipsForParentTestCommentId = new HashSet<TestCommentRelationship>(
			0);
	private Set<QuestionComment> questionComments_1 = new HashSet<QuestionComment>(0);
	private Set<TestCommentRelationship> testCommentRelationshipsForChildTestCommentId = new HashSet<TestCommentRelationship>(
			0);
	private Set<TestCommentRelationship> testCommentRelationshipsForParentTestCommentId_1 = new HashSet<TestCommentRelationship>(
			0);
	private Set<TestCommentRelationship> testCommentRelationshipsForChildTestCommentId_1 = new HashSet<TestCommentRelationship>(
			0);

	public TestComment() {
	}

	public TestComment(Date testCommentDate, String testCommentDesc) {
		this.testCommentDate = testCommentDate;
		this.testCommentDesc = testCommentDesc;
	}

	public TestComment(TestAccessMode testAccessMode, TestReviewerDecision testReviewerDecision, Date testCommentDate,
			Date testCommentTime, String testCommentDesc, Set<QuestionComment> questionComments,
			Set<TestCommentRelationship> testCommentRelationshipsForParentTestCommentId,
			Set<QuestionComment> questionComments_1,
			Set<TestCommentRelationship> testCommentRelationshipsForChildTestCommentId,
			Set<TestCommentRelationship> testCommentRelationshipsForParentTestCommentId_1,
			Set<TestCommentRelationship> testCommentRelationshipsForChildTestCommentId_1) {
		this.testAccessMode = testAccessMode;
		this.testReviewerDecision = testReviewerDecision;
		this.testCommentDate = testCommentDate;
		this.testCommentTime = testCommentTime;
		this.testCommentDesc = testCommentDesc;
		this.questionComments = questionComments;
		this.testCommentRelationshipsForParentTestCommentId = testCommentRelationshipsForParentTestCommentId;
		this.questionComments_1 = questionComments_1;
		this.testCommentRelationshipsForChildTestCommentId = testCommentRelationshipsForChildTestCommentId;
		this.testCommentRelationshipsForParentTestCommentId_1 = testCommentRelationshipsForParentTestCommentId_1;
		this.testCommentRelationshipsForChildTestCommentId_1 = testCommentRelationshipsForChildTestCommentId_1;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "test_comment_id", unique = true, nullable = false)
	public Integer getTestCommentId() {
		return this.testCommentId;
	}

	public void setTestCommentId(Integer testCommentId) {
		this.testCommentId = testCommentId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "test_access_mode_id")
	public TestAccessMode getTestAccessMode() {
		return this.testAccessMode;
	}

	public void setTestAccessMode(TestAccessMode testAccessMode) {
		this.testAccessMode = testAccessMode;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "test_reviewer_decision_id")
	public TestReviewerDecision getTestReviewerDecision() {
		return this.testReviewerDecision;
	}

	public void setTestReviewerDecision(TestReviewerDecision testReviewerDecision) {
		this.testReviewerDecision = testReviewerDecision;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "test_comment_date", nullable = false, length = 10)
	public Date getTestCommentDate() {
		return this.testCommentDate;
	}

	public void setTestCommentDate(Date testCommentDate) {
		this.testCommentDate = testCommentDate;
	}

	@Temporal(TemporalType.TIME)
	@Column(name = "test_comment_time", length = 8)
	public Date getTestCommentTime() {
		return this.testCommentTime;
	}

	public void setTestCommentTime(Date testCommentTime) {
		this.testCommentTime = testCommentTime;
	}

	@Column(name = "test_comment_desc", nullable = false, length = 65535)
	public String getTestCommentDesc() {
		return this.testCommentDesc;
	}

	public void setTestCommentDesc(String testCommentDesc) {
		this.testCommentDesc = testCommentDesc;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "testComment")
	public Set<QuestionComment> getQuestionComments() {
		return this.questionComments;
	}

	public void setQuestionComments(Set<QuestionComment> questionComments) {
		this.questionComments = questionComments;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "testCommentByParentTestCommentId")
	public Set<TestCommentRelationship> getTestCommentRelationshipsForParentTestCommentId() {
		return this.testCommentRelationshipsForParentTestCommentId;
	}

	public void setTestCommentRelationshipsForParentTestCommentId(
			Set<TestCommentRelationship> testCommentRelationshipsForParentTestCommentId) {
		this.testCommentRelationshipsForParentTestCommentId = testCommentRelationshipsForParentTestCommentId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "testComment")
	public Set<QuestionComment> getQuestionComments_1() {
		return this.questionComments_1;
	}

	public void setQuestionComments_1(Set<QuestionComment> questionComments_1) {
		this.questionComments_1 = questionComments_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "testCommentByChildTestCommentId")
	public Set<TestCommentRelationship> getTestCommentRelationshipsForChildTestCommentId() {
		return this.testCommentRelationshipsForChildTestCommentId;
	}

	public void setTestCommentRelationshipsForChildTestCommentId(
			Set<TestCommentRelationship> testCommentRelationshipsForChildTestCommentId) {
		this.testCommentRelationshipsForChildTestCommentId = testCommentRelationshipsForChildTestCommentId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "testCommentByParentTestCommentId")
	public Set<TestCommentRelationship> getTestCommentRelationshipsForParentTestCommentId_1() {
		return this.testCommentRelationshipsForParentTestCommentId_1;
	}

	public void setTestCommentRelationshipsForParentTestCommentId_1(
			Set<TestCommentRelationship> testCommentRelationshipsForParentTestCommentId_1) {
		this.testCommentRelationshipsForParentTestCommentId_1 = testCommentRelationshipsForParentTestCommentId_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "testCommentByChildTestCommentId")
	public Set<TestCommentRelationship> getTestCommentRelationshipsForChildTestCommentId_1() {
		return this.testCommentRelationshipsForChildTestCommentId_1;
	}

	public void setTestCommentRelationshipsForChildTestCommentId_1(
			Set<TestCommentRelationship> testCommentRelationshipsForChildTestCommentId_1) {
		this.testCommentRelationshipsForChildTestCommentId_1 = testCommentRelationshipsForChildTestCommentId_1;
	}

}
