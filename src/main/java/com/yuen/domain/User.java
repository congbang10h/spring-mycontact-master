package com.yuen.domain;
// Generated Jan 30, 2018 7:35:01 PM by Hibernate Tools 5.0.6.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "test")
public class User implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Integer userId;
	private String userCode;
	private String userFirstName;
	private String userLastName;
	private String userEmail;
	private String userMobile;
	private Date userBirthdate;
	private String userAddress;
	private Set<QuestionAccessMode> questionAccessModesForGrantorId = new HashSet<QuestionAccessMode>(0);
	private Set<TestAccessMode> testAccessModesForGrantorId = new HashSet<TestAccessMode>(0);
	private Set<TestReviewerMap> testReviewerMapsForUseUserId = new HashSet<TestReviewerMap>(0);
	private Set<TopicAccessMode> topicAccessModesForAccessorId = new HashSet<TopicAccessMode>(0);
	private Set<CourseAccessMode> courseAccessModesForAccessorId = new HashSet<CourseAccessMode>(0);
	private Set<TestReviewerMap> testReviewerMapsForUserId = new HashSet<TestReviewerMap>(0);
	private Set<QuestionGroup> questionGroups = new HashSet<QuestionGroup>(0);
	private Set<CourseAssignment> courseAssignments = new HashSet<CourseAssignment>(0);
	private Set<Test> tests = new HashSet<Test>(0);
	private Set<CourseAccessMode> courseAccessModesForGrantorId = new HashSet<CourseAccessMode>(0);
	private Set<TopicAccessMode> topicAccessModesForAccessorId_1 = new HashSet<TopicAccessMode>(0);
	private Set<Account> accounts = new HashSet<Account>(0);
	private Set<ProgramAccessMode> programAccessModesForGrantorId = new HashSet<ProgramAccessMode>(0);
	private Set<ProgramAccessMode> programAccessModesForAccessorId = new HashSet<ProgramAccessMode>(0);
	private Set<TopicAccessMode> topicAccessModesForGrantorId = new HashSet<TopicAccessMode>(0);
	private Set<Topic> topics = new HashSet<Topic>(0);
	private Set<TopicAccessMode> topicAccessModesForGrantorId_1 = new HashSet<TopicAccessMode>(0);
	private Set<Question> questions = new HashSet<Question>(0);
	private Set<Test> tests_1 = new HashSet<Test>(0);
	private Set<QuestionAccessMode> questionAccessModesForGrantorId_1 = new HashSet<QuestionAccessMode>(0);
	private Set<UserCourseDevmap> userCourseDevmaps = new HashSet<UserCourseDevmap>(0);
	private Set<CourseAccessMode> courseAccessModesForGrantorId_1 = new HashSet<CourseAccessMode>(0);
	private Set<UserCourseDevmap> userCourseDevmaps_1 = new HashSet<UserCourseDevmap>(0);
	private Set<ProgramAccessMode> programAccessModesForGrantorId_1 = new HashSet<ProgramAccessMode>(0);
	private Set<CourseAssignment> courseAssignments_1 = new HashSet<CourseAssignment>(0);
	private Set<TestReviewerMap> testReviewerMapsForUserId_1 = new HashSet<TestReviewerMap>(0);
	private Set<QuestionAccessMode> questionAccessModesForAccessorId = new HashSet<QuestionAccessMode>(0);
	private Set<Account> accounts_1 = new HashSet<Account>(0);
	private Set<Topic> topics_1 = new HashSet<Topic>(0);
	private Set<TakerTestMap> takerTestMaps = new HashSet<TakerTestMap>(0);
	private Set<Question> questions_1 = new HashSet<Question>(0);
	private Set<TestAccessMode> testAccessModesForAccessorId = new HashSet<TestAccessMode>(0);
	private Set<QuestionAccessMode> questionAccessModesForAccessorId_1 = new HashSet<QuestionAccessMode>(0);
	private Set<TestAccessMode> testAccessModesForAccessorId_1 = new HashSet<TestAccessMode>(0);
	private Set<TakerTestMap> takerTestMaps_1 = new HashSet<TakerTestMap>(0);
	private Set<ProgramAccessMode> programAccessModesForAccessorId_1 = new HashSet<ProgramAccessMode>(0);
	private Set<TestAccessMode> testAccessModesForGrantorId_1 = new HashSet<TestAccessMode>(0);
	private Set<QuestionGroup> questionGroups_1 = new HashSet<QuestionGroup>(0);
	private Set<CourseAccessMode> courseAccessModesForAccessorId_1 = new HashSet<CourseAccessMode>(0);
	private Set<TestReviewerMap> testReviewerMapsForUseUserId_1 = new HashSet<TestReviewerMap>(0);

	public User() {
	}

	public User(String userCode, String userFirstName) {
		this.userCode = userCode;
		this.userFirstName = userFirstName;
	}

	public User(String userCode, String userFirstName, String userLastName, String userEmail, String userMobile,
			Date userBirthdate, String userAddress, Set<QuestionAccessMode> questionAccessModesForGrantorId,
			Set<TestAccessMode> testAccessModesForGrantorId, Set<TestReviewerMap> testReviewerMapsForUseUserId,
			Set<TopicAccessMode> topicAccessModesForAccessorId, Set<CourseAccessMode> courseAccessModesForAccessorId,
			Set<TestReviewerMap> testReviewerMapsForUserId, Set<QuestionGroup> questionGroups,
			Set<CourseAssignment> courseAssignments, Set<Test> tests,
			Set<CourseAccessMode> courseAccessModesForGrantorId, Set<TopicAccessMode> topicAccessModesForAccessorId_1,
			Set<Account> accounts, Set<ProgramAccessMode> programAccessModesForGrantorId,
			Set<ProgramAccessMode> programAccessModesForAccessorId, Set<TopicAccessMode> topicAccessModesForGrantorId,
			Set<Topic> topics, Set<TopicAccessMode> topicAccessModesForGrantorId_1, Set<Question> questions,
			Set<Test> tests_1, Set<QuestionAccessMode> questionAccessModesForGrantorId_1,
			Set<UserCourseDevmap> userCourseDevmaps, Set<CourseAccessMode> courseAccessModesForGrantorId_1,
			Set<UserCourseDevmap> userCourseDevmaps_1, Set<ProgramAccessMode> programAccessModesForGrantorId_1,
			Set<CourseAssignment> courseAssignments_1, Set<TestReviewerMap> testReviewerMapsForUserId_1,
			Set<QuestionAccessMode> questionAccessModesForAccessorId, Set<Account> accounts_1, Set<Topic> topics_1,
			Set<TakerTestMap> takerTestMaps, Set<Question> questions_1,
			Set<TestAccessMode> testAccessModesForAccessorId,
			Set<QuestionAccessMode> questionAccessModesForAccessorId_1,
			Set<TestAccessMode> testAccessModesForAccessorId_1, Set<TakerTestMap> takerTestMaps_1,
			Set<ProgramAccessMode> programAccessModesForAccessorId_1, Set<TestAccessMode> testAccessModesForGrantorId_1,
			Set<QuestionGroup> questionGroups_1, Set<CourseAccessMode> courseAccessModesForAccessorId_1,
			Set<TestReviewerMap> testReviewerMapsForUseUserId_1) {
		this.userCode = userCode;
		this.userFirstName = userFirstName;
		this.userLastName = userLastName;
		this.userEmail = userEmail;
		this.userMobile = userMobile;
		this.userBirthdate = userBirthdate;
		this.userAddress = userAddress;
		this.questionAccessModesForGrantorId = questionAccessModesForGrantorId;
		this.testAccessModesForGrantorId = testAccessModesForGrantorId;
		this.testReviewerMapsForUseUserId = testReviewerMapsForUseUserId;
		this.topicAccessModesForAccessorId = topicAccessModesForAccessorId;
		this.courseAccessModesForAccessorId = courseAccessModesForAccessorId;
		this.testReviewerMapsForUserId = testReviewerMapsForUserId;
		this.questionGroups = questionGroups;
		this.courseAssignments = courseAssignments;
		this.tests = tests;
		this.courseAccessModesForGrantorId = courseAccessModesForGrantorId;
		this.topicAccessModesForAccessorId_1 = topicAccessModesForAccessorId_1;
		this.accounts = accounts;
		this.programAccessModesForGrantorId = programAccessModesForGrantorId;
		this.programAccessModesForAccessorId = programAccessModesForAccessorId;
		this.topicAccessModesForGrantorId = topicAccessModesForGrantorId;
		this.topics = topics;
		this.topicAccessModesForGrantorId_1 = topicAccessModesForGrantorId_1;
		this.questions = questions;
		this.tests_1 = tests_1;
		this.questionAccessModesForGrantorId_1 = questionAccessModesForGrantorId_1;
		this.userCourseDevmaps = userCourseDevmaps;
		this.courseAccessModesForGrantorId_1 = courseAccessModesForGrantorId_1;
		this.userCourseDevmaps_1 = userCourseDevmaps_1;
		this.programAccessModesForGrantorId_1 = programAccessModesForGrantorId_1;
		this.courseAssignments_1 = courseAssignments_1;
		this.testReviewerMapsForUserId_1 = testReviewerMapsForUserId_1;
		this.questionAccessModesForAccessorId = questionAccessModesForAccessorId;
		this.accounts_1 = accounts_1;
		this.topics_1 = topics_1;
		this.takerTestMaps = takerTestMaps;
		this.questions_1 = questions_1;
		this.testAccessModesForAccessorId = testAccessModesForAccessorId;
		this.questionAccessModesForAccessorId_1 = questionAccessModesForAccessorId_1;
		this.testAccessModesForAccessorId_1 = testAccessModesForAccessorId_1;
		this.takerTestMaps_1 = takerTestMaps_1;
		this.programAccessModesForAccessorId_1 = programAccessModesForAccessorId_1;
		this.testAccessModesForGrantorId_1 = testAccessModesForGrantorId_1;
		this.questionGroups_1 = questionGroups_1;
		this.courseAccessModesForAccessorId_1 = courseAccessModesForAccessorId_1;
		this.testReviewerMapsForUseUserId_1 = testReviewerMapsForUseUserId_1;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "user_id", unique = true, nullable = false)
	public Integer getUserId() {
		return this.userId;
	}

	public void setUserId(Integer userId) {
		this.userId = userId;
	}

	@Column(name = "user_code", nullable = false, length = 10)
	public String getUserCode() {
		return this.userCode;
	}

	public void setUserCode(String userCode) {
		this.userCode = userCode;
	}

	@Column(name = "user_first_name", nullable = false, length = 100)
	public String getUserFirstName() {
		return this.userFirstName;
	}

	public void setUserFirstName(String userFirstName) {
		this.userFirstName = userFirstName;
	}

	@Column(name = "user_last_name", length = 100)
	public String getUserLastName() {
		return this.userLastName;
	}

	public void setUserLastName(String userLastName) {
		this.userLastName = userLastName;
	}

	@Column(name = "user_email", length = 100)
	public String getUserEmail() {
		return this.userEmail;
	}

	public void setUserEmail(String userEmail) {
		this.userEmail = userEmail;
	}

	@Column(name = "user_mobile", length = 12)
	public String getUserMobile() {
		return this.userMobile;
	}

	public void setUserMobile(String userMobile) {
		this.userMobile = userMobile;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "user_birthdate", length = 10)
	public Date getUserBirthdate() {
		return this.userBirthdate;
	}

	public void setUserBirthdate(Date userBirthdate) {
		this.userBirthdate = userBirthdate;
	}

	@Column(name = "user_address", length = 65535)
	public String getUserAddress() {
		return this.userAddress;
	}

	public void setUserAddress(String userAddress) {
		this.userAddress = userAddress;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByGrantorId")
	public Set<QuestionAccessMode> getQuestionAccessModesForGrantorId() {
		return this.questionAccessModesForGrantorId;
	}

	public void setQuestionAccessModesForGrantorId(Set<QuestionAccessMode> questionAccessModesForGrantorId) {
		this.questionAccessModesForGrantorId = questionAccessModesForGrantorId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByGrantorId")
	public Set<TestAccessMode> getTestAccessModesForGrantorId() {
		return this.testAccessModesForGrantorId;
	}

	public void setTestAccessModesForGrantorId(Set<TestAccessMode> testAccessModesForGrantorId) {
		this.testAccessModesForGrantorId = testAccessModesForGrantorId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUseUserId")
	public Set<TestReviewerMap> getTestReviewerMapsForUseUserId() {
		return this.testReviewerMapsForUseUserId;
	}

	public void setTestReviewerMapsForUseUserId(Set<TestReviewerMap> testReviewerMapsForUseUserId) {
		this.testReviewerMapsForUseUserId = testReviewerMapsForUseUserId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByAccessorId")
	public Set<TopicAccessMode> getTopicAccessModesForAccessorId() {
		return this.topicAccessModesForAccessorId;
	}

	public void setTopicAccessModesForAccessorId(Set<TopicAccessMode> topicAccessModesForAccessorId) {
		this.topicAccessModesForAccessorId = topicAccessModesForAccessorId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByAccessorId")
	public Set<CourseAccessMode> getCourseAccessModesForAccessorId() {
		return this.courseAccessModesForAccessorId;
	}

	public void setCourseAccessModesForAccessorId(Set<CourseAccessMode> courseAccessModesForAccessorId) {
		this.courseAccessModesForAccessorId = courseAccessModesForAccessorId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUserId")
	public Set<TestReviewerMap> getTestReviewerMapsForUserId() {
		return this.testReviewerMapsForUserId;
	}

	public void setTestReviewerMapsForUserId(Set<TestReviewerMap> testReviewerMapsForUserId) {
		this.testReviewerMapsForUserId = testReviewerMapsForUserId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<QuestionGroup> getQuestionGroups() {
		return this.questionGroups;
	}

	public void setQuestionGroups(Set<QuestionGroup> questionGroups) {
		this.questionGroups = questionGroups;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<CourseAssignment> getCourseAssignments() {
		return this.courseAssignments;
	}

	public void setCourseAssignments(Set<CourseAssignment> courseAssignments) {
		this.courseAssignments = courseAssignments;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Test> getTests() {
		return this.tests;
	}

	public void setTests(Set<Test> tests) {
		this.tests = tests;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByGrantorId")
	public Set<CourseAccessMode> getCourseAccessModesForGrantorId() {
		return this.courseAccessModesForGrantorId;
	}

	public void setCourseAccessModesForGrantorId(Set<CourseAccessMode> courseAccessModesForGrantorId) {
		this.courseAccessModesForGrantorId = courseAccessModesForGrantorId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByAccessorId")
	public Set<TopicAccessMode> getTopicAccessModesForAccessorId_1() {
		return this.topicAccessModesForAccessorId_1;
	}

	public void setTopicAccessModesForAccessorId_1(Set<TopicAccessMode> topicAccessModesForAccessorId_1) {
		this.topicAccessModesForAccessorId_1 = topicAccessModesForAccessorId_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Account> getAccounts() {
		return this.accounts;
	}

	public void setAccounts(Set<Account> accounts) {
		this.accounts = accounts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByGrantorId")
	public Set<ProgramAccessMode> getProgramAccessModesForGrantorId() {
		return this.programAccessModesForGrantorId;
	}

	public void setProgramAccessModesForGrantorId(Set<ProgramAccessMode> programAccessModesForGrantorId) {
		this.programAccessModesForGrantorId = programAccessModesForGrantorId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByAccessorId")
	public Set<ProgramAccessMode> getProgramAccessModesForAccessorId() {
		return this.programAccessModesForAccessorId;
	}

	public void setProgramAccessModesForAccessorId(Set<ProgramAccessMode> programAccessModesForAccessorId) {
		this.programAccessModesForAccessorId = programAccessModesForAccessorId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByGrantorId")
	public Set<TopicAccessMode> getTopicAccessModesForGrantorId() {
		return this.topicAccessModesForGrantorId;
	}

	public void setTopicAccessModesForGrantorId(Set<TopicAccessMode> topicAccessModesForGrantorId) {
		this.topicAccessModesForGrantorId = topicAccessModesForGrantorId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Topic> getTopics() {
		return this.topics;
	}

	public void setTopics(Set<Topic> topics) {
		this.topics = topics;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByGrantorId")
	public Set<TopicAccessMode> getTopicAccessModesForGrantorId_1() {
		return this.topicAccessModesForGrantorId_1;
	}

	public void setTopicAccessModesForGrantorId_1(Set<TopicAccessMode> topicAccessModesForGrantorId_1) {
		this.topicAccessModesForGrantorId_1 = topicAccessModesForGrantorId_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Question> getQuestions() {
		return this.questions;
	}

	public void setQuestions(Set<Question> questions) {
		this.questions = questions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Test> getTests_1() {
		return this.tests_1;
	}

	public void setTests_1(Set<Test> tests_1) {
		this.tests_1 = tests_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByGrantorId")
	public Set<QuestionAccessMode> getQuestionAccessModesForGrantorId_1() {
		return this.questionAccessModesForGrantorId_1;
	}

	public void setQuestionAccessModesForGrantorId_1(Set<QuestionAccessMode> questionAccessModesForGrantorId_1) {
		this.questionAccessModesForGrantorId_1 = questionAccessModesForGrantorId_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserCourseDevmap> getUserCourseDevmaps() {
		return this.userCourseDevmaps;
	}

	public void setUserCourseDevmaps(Set<UserCourseDevmap> userCourseDevmaps) {
		this.userCourseDevmaps = userCourseDevmaps;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByGrantorId")
	public Set<CourseAccessMode> getCourseAccessModesForGrantorId_1() {
		return this.courseAccessModesForGrantorId_1;
	}

	public void setCourseAccessModesForGrantorId_1(Set<CourseAccessMode> courseAccessModesForGrantorId_1) {
		this.courseAccessModesForGrantorId_1 = courseAccessModesForGrantorId_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserCourseDevmap> getUserCourseDevmaps_1() {
		return this.userCourseDevmaps_1;
	}

	public void setUserCourseDevmaps_1(Set<UserCourseDevmap> userCourseDevmaps_1) {
		this.userCourseDevmaps_1 = userCourseDevmaps_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByGrantorId")
	public Set<ProgramAccessMode> getProgramAccessModesForGrantorId_1() {
		return this.programAccessModesForGrantorId_1;
	}

	public void setProgramAccessModesForGrantorId_1(Set<ProgramAccessMode> programAccessModesForGrantorId_1) {
		this.programAccessModesForGrantorId_1 = programAccessModesForGrantorId_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<CourseAssignment> getCourseAssignments_1() {
		return this.courseAssignments_1;
	}

	public void setCourseAssignments_1(Set<CourseAssignment> courseAssignments_1) {
		this.courseAssignments_1 = courseAssignments_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUserId")
	public Set<TestReviewerMap> getTestReviewerMapsForUserId_1() {
		return this.testReviewerMapsForUserId_1;
	}

	public void setTestReviewerMapsForUserId_1(Set<TestReviewerMap> testReviewerMapsForUserId_1) {
		this.testReviewerMapsForUserId_1 = testReviewerMapsForUserId_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByAccessorId")
	public Set<QuestionAccessMode> getQuestionAccessModesForAccessorId() {
		return this.questionAccessModesForAccessorId;
	}

	public void setQuestionAccessModesForAccessorId(Set<QuestionAccessMode> questionAccessModesForAccessorId) {
		this.questionAccessModesForAccessorId = questionAccessModesForAccessorId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Account> getAccounts_1() {
		return this.accounts_1;
	}

	public void setAccounts_1(Set<Account> accounts_1) {
		this.accounts_1 = accounts_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Topic> getTopics_1() {
		return this.topics_1;
	}

	public void setTopics_1(Set<Topic> topics_1) {
		this.topics_1 = topics_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<TakerTestMap> getTakerTestMaps() {
		return this.takerTestMaps;
	}

	public void setTakerTestMaps(Set<TakerTestMap> takerTestMaps) {
		this.takerTestMaps = takerTestMaps;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Question> getQuestions_1() {
		return this.questions_1;
	}

	public void setQuestions_1(Set<Question> questions_1) {
		this.questions_1 = questions_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByAccessorId")
	public Set<TestAccessMode> getTestAccessModesForAccessorId() {
		return this.testAccessModesForAccessorId;
	}

	public void setTestAccessModesForAccessorId(Set<TestAccessMode> testAccessModesForAccessorId) {
		this.testAccessModesForAccessorId = testAccessModesForAccessorId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByAccessorId")
	public Set<QuestionAccessMode> getQuestionAccessModesForAccessorId_1() {
		return this.questionAccessModesForAccessorId_1;
	}

	public void setQuestionAccessModesForAccessorId_1(Set<QuestionAccessMode> questionAccessModesForAccessorId_1) {
		this.questionAccessModesForAccessorId_1 = questionAccessModesForAccessorId_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByAccessorId")
	public Set<TestAccessMode> getTestAccessModesForAccessorId_1() {
		return this.testAccessModesForAccessorId_1;
	}

	public void setTestAccessModesForAccessorId_1(Set<TestAccessMode> testAccessModesForAccessorId_1) {
		this.testAccessModesForAccessorId_1 = testAccessModesForAccessorId_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<TakerTestMap> getTakerTestMaps_1() {
		return this.takerTestMaps_1;
	}

	public void setTakerTestMaps_1(Set<TakerTestMap> takerTestMaps_1) {
		this.takerTestMaps_1 = takerTestMaps_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByAccessorId")
	public Set<ProgramAccessMode> getProgramAccessModesForAccessorId_1() {
		return this.programAccessModesForAccessorId_1;
	}

	public void setProgramAccessModesForAccessorId_1(Set<ProgramAccessMode> programAccessModesForAccessorId_1) {
		this.programAccessModesForAccessorId_1 = programAccessModesForAccessorId_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByGrantorId")
	public Set<TestAccessMode> getTestAccessModesForGrantorId_1() {
		return this.testAccessModesForGrantorId_1;
	}

	public void setTestAccessModesForGrantorId_1(Set<TestAccessMode> testAccessModesForGrantorId_1) {
		this.testAccessModesForGrantorId_1 = testAccessModesForGrantorId_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<QuestionGroup> getQuestionGroups_1() {
		return this.questionGroups_1;
	}

	public void setQuestionGroups_1(Set<QuestionGroup> questionGroups_1) {
		this.questionGroups_1 = questionGroups_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByAccessorId")
	public Set<CourseAccessMode> getCourseAccessModesForAccessorId_1() {
		return this.courseAccessModesForAccessorId_1;
	}

	public void setCourseAccessModesForAccessorId_1(Set<CourseAccessMode> courseAccessModesForAccessorId_1) {
		this.courseAccessModesForAccessorId_1 = courseAccessModesForAccessorId_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUseUserId")
	public Set<TestReviewerMap> getTestReviewerMapsForUseUserId_1() {
		return this.testReviewerMapsForUseUserId_1;
	}

	public void setTestReviewerMapsForUseUserId_1(Set<TestReviewerMap> testReviewerMapsForUseUserId_1) {
		this.testReviewerMapsForUseUserId_1 = testReviewerMapsForUseUserId_1;
	}

}
